rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to get user role
    function getUserRole() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    // Function to get teacher's assigned class and section
    function getTeacherClassSection() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }
    
    // Function to check if user is a student
    function isStudent() {
      return request.auth != null && getUserRole() == 'student';
    }
    
    // Function to check if user is a teacher
    function isTeacher() {
      return request.auth != null && getUserRole() == 'teacher';
    }
    
    // Function to check if user is a parent
    function isParent() {
      return request.auth != null && getUserRole() == 'parent';
    }
    
    // Function to check if teacher can access specific class/section
    function canAccessClassSection(class, section) {
      let teacherData = getTeacherClassSection();
      return teacherData != null && 
             teacherData.class_assigned == class && 
             teacherData.section_assigned == section;
    }
    
    // Function to get student's class and section
    function getStudentClassSection(studentId) {
      return get(/databases/$(database)/documents/users/$(studentId)).data;
    }
    
    // Function to check if parent can access student data
    function canAccessStudent(studentId) {
      // Check if student exists
      let studentDoc = get(/databases/$(database)/documents/users/$(studentId));
      if (!studentDoc.exists) {
        return false;
      }
      
      // For parents, check if this student is their child
      if (isParent()) {
        let parentDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return parentDoc.data.studentId == studentId;
      }
      
      // For students, check if it's their own data
      if (isStudent()) {
        return request.auth.uid == studentId;
      }
      
      return false;
    }
    
    // Students collection
    match /students/{studentId} {
      // Students can read their own data, teachers can read student data
      allow read: if isStudent() && request.auth.uid == studentId || 
                   isTeacher() || 
                   isParent() && canAccessStudent(studentId);
      
      // Only teachers can write student data
      allow write: if isTeacher();
      
      // Marks subcollection
      match /marks/{examType} {
        // Students can read their own marks, parents can read their children's marks, teachers can read
        allow read: if isStudent() && request.auth.uid == studentId || 
                     isParent() && canAccessStudent(studentId) || 
                     isTeacher();
        
        // Only teachers can write marks, and only for their assigned classes
        allow write: if isTeacher() && 
                      canAccessClassSection(
                        getStudentClassSection(studentId).class, 
                        getStudentClassSection(studentId).section
                      );
      }
    }
    
    // Parents collection
    match /parents/{parentId} {
      // Parents can read their own data, teachers can read parent data
      allow read: if isParent() && request.auth.uid == parentId || isTeacher();
      
      // Only parents can write their own data
      allow write: if isParent() && request.auth.uid == parentId;
    }
    
    // Teachers collection
    match /teachers/{teacherId} {
      // Teachers can read their own data
      allow read: if isTeacher() && request.auth.uid == teacherId;
      
      // Only teachers can write their own data
      allow write: if isTeacher() && request.auth.uid == teacherId;
    }
    
    // Unregistered student marks (temporary storage)
    match /unregistered_student_marks/{document} {
      // Only teachers can read/write
      allow read, write: if isTeacher();
    }
    
    // Allow read access to all users for public data
    match /{document=**} {
      allow read: if true;
    }
  }
}